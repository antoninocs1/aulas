## Banco de Dados: Sistema de Pedidos

Este banco de dados foi projetado para registrar e gerenciar as compras feitas por clientes, garantindo que todas as informações sobre os pedidos e os produtos adquiridos sejam devidamente armazenadas e acessíveis para futuras consultas. Ele é composto por três tabelas principais: `clientes`, `pedidos` e `itens_pedido`, que se relacionam entre si para fornecer um histórico completo das transações.

### Estrutura das Tabelas

#### 1. Tabela `clientes`
A tabela `clientes` contém os dados cadastrais dos clientes, permitindo a identificação de quem realizou cada pedido.

Campos:
- `id_cliente`: Identificador único do cliente.
- `nome`: Nome completo do cliente.
- `email`: Endereço de e-mail do cliente, que deve ser único.
- `telefone`: Número de telefone para contato.
- `endereco`: Endereço completo do cliente.
- `data_cadastro`: Data e hora em que o cliente foi cadastrado.

```sql
CREATE TABLE clientes (
    id_cliente INT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    telefone VARCHAR(20),
    endereco TEXT,
    data_cadastro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

##### Inserção de dados
```sql
INSERT INTO clientes (id_cliente, nome, email, telefone, endereco) 
VALUES (1, 'João Silva', 'joao@email.com', '11999999999', 'Rua A, 123');
```

##### Atualização de dados
```sql
UPDATE clientes SET telefone = '11888888888' WHERE id_cliente = 1;
```

##### Seleção de dados
```sql
SELECT * FROM clientes WHERE id_cliente = 1;
```

#### 2. Tabela `pedidos`
A tabela `pedidos` armazena as informações dos pedidos realizados pelos clientes, vinculando-os à tabela `clientes`.

Campos:
- `id_pedido`: Identificador único do pedido.
- `id_cliente`: Referência ao cliente que fez o pedido.
- `data_pedido`: Data e hora em que o pedido foi realizado.
- `total`: Valor total do pedido.
- `status`: Status do pedido (por exemplo, "Em processamento").

```sql
CREATE TABLE pedidos (
    id_pedido INT PRIMARY KEY,
    id_cliente INT,
    data_pedido TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total DECIMAL(10,2) NOT NULL,
    status VARCHAR(50) NOT NULL,
    FOREIGN KEY (id_cliente) REFERENCES clientes(id_cliente)
);
```

##### Inserção de dados
```sql
INSERT INTO pedidos (id_pedido, id_cliente, total, status) 
VALUES (1, 1, 150.00, 'Em processamento');
```

##### Atualização de dados
```sql
UPDATE pedidos SET status = 'Finalizado' WHERE id_pedido = 1;
```

##### Seleção de dados
```sql
SELECT * FROM pedidos WHERE id_pedido = 1;
```

#### 3. Tabela `itens_pedido`
A tabela `itens_pedido` registra os produtos incluídos em cada pedido, possibilitando o detalhamento do que foi comprado.

Campos:
- `id_item`: Identificador único do item no pedido.
- `id_pedido`: Referência ao pedido ao qual o item pertence.
- `produto`: Nome do produto adquirido.
- `quantidade`: Quantidade do produto no pedido.
- `preco_unitario`: Preço unitário do produto.
- `subtotal`: Valor total do item no pedido (quantidade multiplicada pelo preço unitário).

```sql
CREATE TABLE itens_pedido (
    id_item INT PRIMARY KEY,
    id_pedido INT,
    produto VARCHAR(255) NOT NULL,
    quantidade INT NOT NULL,
    preco_unitario DECIMAL(10,2) NOT NULL,
    subtotal DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (id_pedido) REFERENCES pedidos(id_pedido)
);
```

##### Inserção de dados
```sql
INSERT INTO itens_pedido (id_item, id_pedido, produto, quantidade, preco_unitario, subtotal) 
VALUES (1, 1, 'Notebook', 1, 150.00, 150.00);
```

##### Atualização de dados
```sql
UPDATE itens_pedido SET quantidade = 2, subtotal = 300.00 WHERE id_item = 1;
```

##### Seleção de dados
```sql
SELECT * FROM itens_pedido WHERE id_pedido = 1;
```

### Consultas SQL

#### 1. Listar os pedidos e seus clientes
Consulta que recupera os pedidos realizados e os respectivos clientes:
```sql
SELECT pedidos.id_pedido, clientes.nome, pedidos.data_pedido, pedidos.total 
FROM pedidos 
JOIN clientes ON pedidos.id_cliente = clientes.id_cliente;
```

#### 2. Obter os itens de um pedido específico junto com os detalhes do cliente
Consulta que detalha os itens de um pedido específico, relacionando-os ao cliente:
```sql
SELECT clientes.nome, pedidos.id_pedido, itens_pedido.produto, itens_pedido.quantidade, itens_pedido.subtotal
FROM itens_pedido
JOIN pedidos ON itens_pedido.id_pedido = pedidos.id_pedido
JOIN clientes ON pedidos.id_cliente = clientes.id_cliente
WHERE pedidos.id_pedido = 1;
```
